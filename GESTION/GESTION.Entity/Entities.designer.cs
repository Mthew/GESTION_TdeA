#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GESTION.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GestionTdeA")]
	public partial class EntitiesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCiudade(Ciudade instance);
    partial void UpdateCiudade(Ciudade instance);
    partial void DeleteCiudade(Ciudade instance);
    partial void InsertUsuario(Usuario instance);
    partial void UpdateUsuario(Usuario instance);
    partial void DeleteUsuario(Usuario instance);
    partial void InsertDepartamento(Departamento instance);
    partial void UpdateDepartamento(Departamento instance);
    partial void DeleteDepartamento(Departamento instance);
    partial void InsertPaise(Paise instance);
    partial void UpdatePaise(Paise instance);
    partial void DeletePaise(Paise instance);
    partial void InsertPermiso(Permiso instance);
    partial void UpdatePermiso(Permiso instance);
    partial void DeletePermiso(Permiso instance);
    partial void InsertPermisosRol(PermisosRol instance);
    partial void UpdatePermisosRol(PermisosRol instance);
    partial void DeletePermisosRol(PermisosRol instance);
    partial void InsertPersona(Persona instance);
    partial void UpdatePersona(Persona instance);
    partial void DeletePersona(Persona instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRolesUsuario(RolesUsuario instance);
    partial void UpdateRolesUsuario(RolesUsuario instance);
    partial void DeleteRolesUsuario(RolesUsuario instance);
    partial void Insertsysdiagram(sysdiagram instance);
    partial void Updatesysdiagram(sysdiagram instance);
    partial void Deletesysdiagram(sysdiagram instance);
    partial void InsertTipoDocumento(TipoDocumento instance);
    partial void UpdateTipoDocumento(TipoDocumento instance);
    partial void DeleteTipoDocumento(TipoDocumento instance);
    #endregion
		
		public EntitiesDataContext() : 
				base(global::GESTION.Entity.Properties.Settings.Default.GestionTdeAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ciudade> Ciudades
		{
			get
			{
				return this.GetTable<Ciudade>();
			}
		}
		
		public System.Data.Linq.Table<Usuario> Usuarios
		{
			get
			{
				return this.GetTable<Usuario>();
			}
		}
		
		public System.Data.Linq.Table<Departamento> Departamentos
		{
			get
			{
				return this.GetTable<Departamento>();
			}
		}
		
		public System.Data.Linq.Table<Paise> Paises
		{
			get
			{
				return this.GetTable<Paise>();
			}
		}
		
		public System.Data.Linq.Table<Permiso> Permisos
		{
			get
			{
				return this.GetTable<Permiso>();
			}
		}
		
		public System.Data.Linq.Table<PermisosRol> PermisosRols
		{
			get
			{
				return this.GetTable<PermisosRol>();
			}
		}
		
		public System.Data.Linq.Table<Persona> Personas
		{
			get
			{
				return this.GetTable<Persona>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RolesUsuario> RolesUsuarios
		{
			get
			{
				return this.GetTable<RolesUsuario>();
			}
		}
		
		public System.Data.Linq.Table<sysdiagram> sysdiagrams
		{
			get
			{
				return this.GetTable<sysdiagram>();
			}
		}
		
		public System.Data.Linq.Table<TipoDocumento> TipoDocumentos
		{
			get
			{
				return this.GetTable<TipoDocumento>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ciudades")]
	public partial class Ciudade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdDepartamento;
		
		private string _Codigo;
		
		private string _Nombre;
		
		private EntitySet<Persona> _Personas;
		
		private EntityRef<Departamento> _Departamento;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdDepartamentoChanging(System.Nullable<int> value);
    partial void OnIdDepartamentoChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Ciudade()
		{
			this._Personas = new EntitySet<Persona>(new Action<Persona>(this.attach_Personas), new Action<Persona>(this.detach_Personas));
			this._Departamento = default(EntityRef<Departamento>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDepartamento", DbType="Int")]
		public System.Nullable<int> IdDepartamento
		{
			get
			{
				return this._IdDepartamento;
			}
			set
			{
				if ((this._IdDepartamento != value))
				{
					if (this._Departamento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdDepartamentoChanging(value);
					this.SendPropertyChanging();
					this._IdDepartamento = value;
					this.SendPropertyChanged("IdDepartamento");
					this.OnIdDepartamentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codigo", DbType="VarChar(20)")]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ciudade_Persona", Storage="_Personas", ThisKey="Id", OtherKey="IdCiudad")]
		public EntitySet<Persona> Personas
		{
			get
			{
				return this._Personas;
			}
			set
			{
				this._Personas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departamento_Ciudade", Storage="_Departamento", ThisKey="IdDepartamento", OtherKey="Id", IsForeignKey=true)]
		public Departamento Departamento
		{
			get
			{
				return this._Departamento.Entity;
			}
			set
			{
				Departamento previousValue = this._Departamento.Entity;
				if (((previousValue != value) 
							|| (this._Departamento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Departamento.Entity = null;
						previousValue.Ciudades.Remove(this);
					}
					this._Departamento.Entity = value;
					if ((value != null))
					{
						value.Ciudades.Add(this);
						this._IdDepartamento = value.Id;
					}
					else
					{
						this._IdDepartamento = default(Nullable<int>);
					}
					this.SendPropertyChanged("Departamento");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Personas(Persona entity)
		{
			this.SendPropertyChanging();
			entity.Ciudade = this;
		}
		
		private void detach_Personas(Persona entity)
		{
			this.SendPropertyChanging();
			entity.Ciudade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usuarios")]
	public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdPersona;
		
		private string _Nombre;
		
		private string _Clave;
		
		private System.Nullable<bool> _Activo;
		
		private EntitySet<RolesUsuario> _RolesUsuarios;
		
		private EntityRef<Persona> _Persona;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPersonaChanging(System.Nullable<int> value);
    partial void OnIdPersonaChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnClaveChanging(string value);
    partial void OnClaveChanged();
    partial void OnActivoChanging(System.Nullable<bool> value);
    partial void OnActivoChanged();
    #endregion
		
		public Usuario()
		{
			this._RolesUsuarios = new EntitySet<RolesUsuario>(new Action<RolesUsuario>(this.attach_RolesUsuarios), new Action<RolesUsuario>(this.detach_RolesUsuarios));
			this._Persona = default(EntityRef<Persona>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPersona", DbType="Int")]
		public System.Nullable<int> IdPersona
		{
			get
			{
				return this._IdPersona;
			}
			set
			{
				if ((this._IdPersona != value))
				{
					if (this._Persona.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPersonaChanging(value);
					this.SendPropertyChanging();
					this._IdPersona = value;
					this.SendPropertyChanged("IdPersona");
					this.OnIdPersonaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Clave", DbType="NVarChar(200)")]
		public string Clave
		{
			get
			{
				return this._Clave;
			}
			set
			{
				if ((this._Clave != value))
				{
					this.OnClaveChanging(value);
					this.SendPropertyChanging();
					this._Clave = value;
					this.SendPropertyChanged("Clave");
					this.OnClaveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activo", DbType="Bit")]
		public System.Nullable<bool> Activo
		{
			get
			{
				return this._Activo;
			}
			set
			{
				if ((this._Activo != value))
				{
					this.OnActivoChanging(value);
					this.SendPropertyChanging();
					this._Activo = value;
					this.SendPropertyChanged("Activo");
					this.OnActivoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_RolesUsuario", Storage="_RolesUsuarios", ThisKey="Id", OtherKey="IdUsuario")]
		public EntitySet<RolesUsuario> RolesUsuarios
		{
			get
			{
				return this._RolesUsuarios;
			}
			set
			{
				this._RolesUsuarios.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persona_Usuario", Storage="_Persona", ThisKey="IdPersona", OtherKey="Id", IsForeignKey=true)]
		public Persona Persona
		{
			get
			{
				return this._Persona.Entity;
			}
			set
			{
				Persona previousValue = this._Persona.Entity;
				if (((previousValue != value) 
							|| (this._Persona.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persona.Entity = null;
						previousValue.Usuarios.Remove(this);
					}
					this._Persona.Entity = value;
					if ((value != null))
					{
						value.Usuarios.Add(this);
						this._IdPersona = value.Id;
					}
					else
					{
						this._IdPersona = default(Nullable<int>);
					}
					this.SendPropertyChanged("Persona");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RolesUsuarios(RolesUsuario entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_RolesUsuarios(RolesUsuario entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departamentos")]
	public partial class Departamento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdPais;
		
		private string _Codigo;
		
		private string _Nombre;
		
		private EntitySet<Ciudade> _Ciudades;
		
		private EntityRef<Paise> _Paise;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPaisChanging(System.Nullable<int> value);
    partial void OnIdPaisChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Departamento()
		{
			this._Ciudades = new EntitySet<Ciudade>(new Action<Ciudade>(this.attach_Ciudades), new Action<Ciudade>(this.detach_Ciudades));
			this._Paise = default(EntityRef<Paise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPais", DbType="Int")]
		public System.Nullable<int> IdPais
		{
			get
			{
				return this._IdPais;
			}
			set
			{
				if ((this._IdPais != value))
				{
					if (this._Paise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPaisChanging(value);
					this.SendPropertyChanging();
					this._IdPais = value;
					this.SendPropertyChanged("IdPais");
					this.OnIdPaisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codigo", DbType="VarChar(20)")]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departamento_Ciudade", Storage="_Ciudades", ThisKey="Id", OtherKey="IdDepartamento")]
		public EntitySet<Ciudade> Ciudades
		{
			get
			{
				return this._Ciudades;
			}
			set
			{
				this._Ciudades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paise_Departamento", Storage="_Paise", ThisKey="IdPais", OtherKey="Id", IsForeignKey=true)]
		public Paise Paise
		{
			get
			{
				return this._Paise.Entity;
			}
			set
			{
				Paise previousValue = this._Paise.Entity;
				if (((previousValue != value) 
							|| (this._Paise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paise.Entity = null;
						previousValue.Departamentos.Remove(this);
					}
					this._Paise.Entity = value;
					if ((value != null))
					{
						value.Departamentos.Add(this);
						this._IdPais = value.Id;
					}
					else
					{
						this._IdPais = default(Nullable<int>);
					}
					this.SendPropertyChanged("Paise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ciudades(Ciudade entity)
		{
			this.SendPropertyChanging();
			entity.Departamento = this;
		}
		
		private void detach_Ciudades(Ciudade entity)
		{
			this.SendPropertyChanging();
			entity.Departamento = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paises")]
	public partial class Paise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Codigo;
		
		private string _Nombre;
		
		private EntitySet<Departamento> _Departamentos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Paise()
		{
			this._Departamentos = new EntitySet<Departamento>(new Action<Departamento>(this.attach_Departamentos), new Action<Departamento>(this.detach_Departamentos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codigo", DbType="VarChar(20)")]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paise_Departamento", Storage="_Departamentos", ThisKey="Id", OtherKey="IdPais")]
		public EntitySet<Departamento> Departamentos
		{
			get
			{
				return this._Departamentos;
			}
			set
			{
				this._Departamentos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departamentos(Departamento entity)
		{
			this.SendPropertyChanging();
			entity.Paise = this;
		}
		
		private void detach_Departamentos(Departamento entity)
		{
			this.SendPropertyChanging();
			entity.Paise = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permisos")]
	public partial class Permiso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Codigo;
		
		private string _Nombre;
		
		private EntitySet<PermisosRol> _PermisosRols;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Permiso()
		{
			this._PermisosRols = new EntitySet<PermisosRol>(new Action<PermisosRol>(this.attach_PermisosRols), new Action<PermisosRol>(this.detach_PermisosRols));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codigo", DbType="VarChar(50)")]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permiso_PermisosRol", Storage="_PermisosRols", ThisKey="Id", OtherKey="IdPermiso")]
		public EntitySet<PermisosRol> PermisosRols
		{
			get
			{
				return this._PermisosRols;
			}
			set
			{
				this._PermisosRols.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermisosRols(PermisosRol entity)
		{
			this.SendPropertyChanging();
			entity.Permiso = this;
		}
		
		private void detach_PermisosRols(PermisosRol entity)
		{
			this.SendPropertyChanging();
			entity.Permiso = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermisosRol")]
	public partial class PermisosRol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdRol;
		
		private System.Nullable<int> _IdPermiso;
		
		private EntityRef<Permiso> _Permiso;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdRolChanging(System.Nullable<int> value);
    partial void OnIdRolChanged();
    partial void OnIdPermisoChanging(System.Nullable<int> value);
    partial void OnIdPermisoChanged();
    #endregion
		
		public PermisosRol()
		{
			this._Permiso = default(EntityRef<Permiso>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRol", DbType="Int")]
		public System.Nullable<int> IdRol
		{
			get
			{
				return this._IdRol;
			}
			set
			{
				if ((this._IdRol != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRolChanging(value);
					this.SendPropertyChanging();
					this._IdRol = value;
					this.SendPropertyChanged("IdRol");
					this.OnIdRolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPermiso", DbType="Int")]
		public System.Nullable<int> IdPermiso
		{
			get
			{
				return this._IdPermiso;
			}
			set
			{
				if ((this._IdPermiso != value))
				{
					if (this._Permiso.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPermisoChanging(value);
					this.SendPropertyChanging();
					this._IdPermiso = value;
					this.SendPropertyChanged("IdPermiso");
					this.OnIdPermisoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permiso_PermisosRol", Storage="_Permiso", ThisKey="IdPermiso", OtherKey="Id", IsForeignKey=true)]
		public Permiso Permiso
		{
			get
			{
				return this._Permiso.Entity;
			}
			set
			{
				Permiso previousValue = this._Permiso.Entity;
				if (((previousValue != value) 
							|| (this._Permiso.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permiso.Entity = null;
						previousValue.PermisosRols.Remove(this);
					}
					this._Permiso.Entity = value;
					if ((value != null))
					{
						value.PermisosRols.Add(this);
						this._IdPermiso = value.Id;
					}
					else
					{
						this._IdPermiso = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permiso");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_PermisosRol", Storage="_Role", ThisKey="IdRol", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.PermisosRols.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.PermisosRols.Add(this);
						this._IdRol = value.Id;
					}
					else
					{
						this._IdRol = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Personas")]
	public partial class Persona : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdCiudad;
		
		private int _IdTipoDocumento;
		
		private string _NumeroDocumento;
		
		private string _Nombre;
		
		private string _SegundoNombre;
		
		private string _Apellido;
		
		private string _SegundoApellido;
		
		private System.Nullable<System.DateTime> _FechaNacimiento;
		
		private string _Telefono;
		
		private string _Celular;
		
		private string _Email;
		
		private string _Direccion;
		
		private System.Nullable<bool> _Activo;
		
		private EntitySet<Usuario> _Usuarios;
		
		private EntityRef<Ciudade> _Ciudade;
		
		private EntityRef<TipoDocumento> _TipoDocumento;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdCiudadChanging(System.Nullable<int> value);
    partial void OnIdCiudadChanged();
    partial void OnIdTipoDocumentoChanging(int value);
    partial void OnIdTipoDocumentoChanged();
    partial void OnNumeroDocumentoChanging(string value);
    partial void OnNumeroDocumentoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnSegundoNombreChanging(string value);
    partial void OnSegundoNombreChanged();
    partial void OnApellidoChanging(string value);
    partial void OnApellidoChanged();
    partial void OnSegundoApellidoChanging(string value);
    partial void OnSegundoApellidoChanged();
    partial void OnFechaNacimientoChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaNacimientoChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnCelularChanging(string value);
    partial void OnCelularChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnActivoChanging(System.Nullable<bool> value);
    partial void OnActivoChanged();
    #endregion
		
		public Persona()
		{
			this._Usuarios = new EntitySet<Usuario>(new Action<Usuario>(this.attach_Usuarios), new Action<Usuario>(this.detach_Usuarios));
			this._Ciudade = default(EntityRef<Ciudade>);
			this._TipoDocumento = default(EntityRef<TipoDocumento>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCiudad", DbType="Int")]
		public System.Nullable<int> IdCiudad
		{
			get
			{
				return this._IdCiudad;
			}
			set
			{
				if ((this._IdCiudad != value))
				{
					if (this._Ciudade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCiudadChanging(value);
					this.SendPropertyChanging();
					this._IdCiudad = value;
					this.SendPropertyChanged("IdCiudad");
					this.OnIdCiudadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTipoDocumento", DbType="Int NOT NULL")]
		public int IdTipoDocumento
		{
			get
			{
				return this._IdTipoDocumento;
			}
			set
			{
				if ((this._IdTipoDocumento != value))
				{
					if (this._TipoDocumento.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTipoDocumentoChanging(value);
					this.SendPropertyChanging();
					this._IdTipoDocumento = value;
					this.SendPropertyChanged("IdTipoDocumento");
					this.OnIdTipoDocumentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumeroDocumento", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string NumeroDocumento
		{
			get
			{
				return this._NumeroDocumento;
			}
			set
			{
				if ((this._NumeroDocumento != value))
				{
					this.OnNumeroDocumentoChanging(value);
					this.SendPropertyChanging();
					this._NumeroDocumento = value;
					this.SendPropertyChanged("NumeroDocumento");
					this.OnNumeroDocumentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegundoNombre", DbType="VarChar(200)")]
		public string SegundoNombre
		{
			get
			{
				return this._SegundoNombre;
			}
			set
			{
				if ((this._SegundoNombre != value))
				{
					this.OnSegundoNombreChanging(value);
					this.SendPropertyChanging();
					this._SegundoNombre = value;
					this.SendPropertyChanged("SegundoNombre");
					this.OnSegundoNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellido", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Apellido
		{
			get
			{
				return this._Apellido;
			}
			set
			{
				if ((this._Apellido != value))
				{
					this.OnApellidoChanging(value);
					this.SendPropertyChanging();
					this._Apellido = value;
					this.SendPropertyChanged("Apellido");
					this.OnApellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SegundoApellido", DbType="VarChar(200)")]
		public string SegundoApellido
		{
			get
			{
				return this._SegundoApellido;
			}
			set
			{
				if ((this._SegundoApellido != value))
				{
					this.OnSegundoApellidoChanging(value);
					this.SendPropertyChanging();
					this._SegundoApellido = value;
					this.SendPropertyChanged("SegundoApellido");
					this.OnSegundoApellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaNacimiento", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> FechaNacimiento
		{
			get
			{
				return this._FechaNacimiento;
			}
			set
			{
				if ((this._FechaNacimiento != value))
				{
					this.OnFechaNacimientoChanging(value);
					this.SendPropertyChanging();
					this._FechaNacimiento = value;
					this.SendPropertyChanged("FechaNacimiento");
					this.OnFechaNacimientoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="VarChar(50)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Celular", DbType="VarChar(50)")]
		public string Celular
		{
			get
			{
				return this._Celular;
			}
			set
			{
				if ((this._Celular != value))
				{
					this.OnCelularChanging(value);
					this.SendPropertyChanging();
					this._Celular = value;
					this.SendPropertyChanged("Celular");
					this.OnCelularChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direccion", DbType="VarChar(300)")]
		public string Direccion
		{
			get
			{
				return this._Direccion;
			}
			set
			{
				if ((this._Direccion != value))
				{
					this.OnDireccionChanging(value);
					this.SendPropertyChanging();
					this._Direccion = value;
					this.SendPropertyChanged("Direccion");
					this.OnDireccionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activo", DbType="Bit")]
		public System.Nullable<bool> Activo
		{
			get
			{
				return this._Activo;
			}
			set
			{
				if ((this._Activo != value))
				{
					this.OnActivoChanging(value);
					this.SendPropertyChanging();
					this._Activo = value;
					this.SendPropertyChanged("Activo");
					this.OnActivoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persona_Usuario", Storage="_Usuarios", ThisKey="Id", OtherKey="IdPersona")]
		public EntitySet<Usuario> Usuarios
		{
			get
			{
				return this._Usuarios;
			}
			set
			{
				this._Usuarios.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ciudade_Persona", Storage="_Ciudade", ThisKey="IdCiudad", OtherKey="Id", IsForeignKey=true)]
		public Ciudade Ciudade
		{
			get
			{
				return this._Ciudade.Entity;
			}
			set
			{
				Ciudade previousValue = this._Ciudade.Entity;
				if (((previousValue != value) 
							|| (this._Ciudade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ciudade.Entity = null;
						previousValue.Personas.Remove(this);
					}
					this._Ciudade.Entity = value;
					if ((value != null))
					{
						value.Personas.Add(this);
						this._IdCiudad = value.Id;
					}
					else
					{
						this._IdCiudad = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ciudade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoDocumento_Persona", Storage="_TipoDocumento", ThisKey="IdTipoDocumento", OtherKey="Id", IsForeignKey=true)]
		public TipoDocumento TipoDocumento
		{
			get
			{
				return this._TipoDocumento.Entity;
			}
			set
			{
				TipoDocumento previousValue = this._TipoDocumento.Entity;
				if (((previousValue != value) 
							|| (this._TipoDocumento.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoDocumento.Entity = null;
						previousValue.Personas.Remove(this);
					}
					this._TipoDocumento.Entity = value;
					if ((value != null))
					{
						value.Personas.Add(this);
						this._IdTipoDocumento = value.Id;
					}
					else
					{
						this._IdTipoDocumento = default(int);
					}
					this.SendPropertyChanged("TipoDocumento");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Usuarios(Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Persona = this;
		}
		
		private void detach_Usuarios(Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Persona = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Codigo;
		
		private string _Nombre;
		
		private EntitySet<PermisosRol> _PermisosRols;
		
		private EntitySet<RolesUsuario> _RolesUsuarios;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Role()
		{
			this._PermisosRols = new EntitySet<PermisosRol>(new Action<PermisosRol>(this.attach_PermisosRols), new Action<PermisosRol>(this.detach_PermisosRols));
			this._RolesUsuarios = new EntitySet<RolesUsuario>(new Action<RolesUsuario>(this.attach_RolesUsuarios), new Action<RolesUsuario>(this.detach_RolesUsuarios));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codigo", DbType="VarChar(50)")]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_PermisosRol", Storage="_PermisosRols", ThisKey="Id", OtherKey="IdRol")]
		public EntitySet<PermisosRol> PermisosRols
		{
			get
			{
				return this._PermisosRols;
			}
			set
			{
				this._PermisosRols.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolesUsuario", Storage="_RolesUsuarios", ThisKey="Id", OtherKey="IdRol")]
		public EntitySet<RolesUsuario> RolesUsuarios
		{
			get
			{
				return this._RolesUsuarios;
			}
			set
			{
				this._RolesUsuarios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermisosRols(PermisosRol entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_PermisosRols(PermisosRol entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_RolesUsuarios(RolesUsuario entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RolesUsuarios(RolesUsuario entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolesUsuario")]
	public partial class RolesUsuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _IdUsuario;
		
		private System.Nullable<int> _IdRol;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdUsuarioChanging(System.Nullable<int> value);
    partial void OnIdUsuarioChanged();
    partial void OnIdRolChanging(System.Nullable<int> value);
    partial void OnIdRolChanged();
    #endregion
		
		public RolesUsuario()
		{
			this._Role = default(EntityRef<Role>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUsuario", DbType="Int")]
		public System.Nullable<int> IdUsuario
		{
			get
			{
				return this._IdUsuario;
			}
			set
			{
				if ((this._IdUsuario != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUsuarioChanging(value);
					this.SendPropertyChanging();
					this._IdUsuario = value;
					this.SendPropertyChanged("IdUsuario");
					this.OnIdUsuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRol", DbType="Int")]
		public System.Nullable<int> IdRol
		{
			get
			{
				return this._IdRol;
			}
			set
			{
				if ((this._IdRol != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRolChanging(value);
					this.SendPropertyChanging();
					this._IdRol = value;
					this.SendPropertyChanged("IdRol");
					this.OnIdRolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolesUsuario", Storage="_Role", ThisKey="IdRol", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RolesUsuarios.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RolesUsuarios.Add(this);
						this._IdRol = value.Id;
					}
					else
					{
						this._IdRol = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_RolesUsuario", Storage="_Usuario", ThisKey="IdUsuario", OtherKey="Id", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.RolesUsuarios.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.RolesUsuarios.Add(this);
						this._IdUsuario = value.Id;
					}
					else
					{
						this._IdUsuario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sysdiagrams")]
	public partial class sysdiagram : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private int _principal_id;
		
		private int _diagram_id;
		
		private System.Nullable<int> _version;
		
		private System.Data.Linq.Binary _definition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onprincipal_idChanging(int value);
    partial void Onprincipal_idChanged();
    partial void Ondiagram_idChanging(int value);
    partial void Ondiagram_idChanged();
    partial void OnversionChanging(System.Nullable<int> value);
    partial void OnversionChanged();
    partial void OndefinitionChanging(System.Data.Linq.Binary value);
    partial void OndefinitionChanged();
    #endregion
		
		public sysdiagram()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_principal_id", DbType="Int NOT NULL")]
		public int principal_id
		{
			get
			{
				return this._principal_id;
			}
			set
			{
				if ((this._principal_id != value))
				{
					this.Onprincipal_idChanging(value);
					this.SendPropertyChanging();
					this._principal_id = value;
					this.SendPropertyChanged("principal_id");
					this.Onprincipal_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagram_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int diagram_id
		{
			get
			{
				return this._diagram_id;
			}
			set
			{
				if ((this._diagram_id != value))
				{
					this.Ondiagram_idChanging(value);
					this.SendPropertyChanging();
					this._diagram_id = value;
					this.SendPropertyChanged("diagram_id");
					this.Ondiagram_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="Int")]
		public System.Nullable<int> version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_definition", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary definition
		{
			get
			{
				return this._definition;
			}
			set
			{
				if ((this._definition != value))
				{
					this.OndefinitionChanging(value);
					this.SendPropertyChanging();
					this._definition = value;
					this.SendPropertyChanged("definition");
					this.OndefinitionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoDocumento")]
	public partial class TipoDocumento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Codigo;
		
		private string _Nombre;
		
		private EntitySet<Persona> _Personas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public TipoDocumento()
		{
			this._Personas = new EntitySet<Persona>(new Action<Persona>(this.attach_Personas), new Action<Persona>(this.detach_Personas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codigo", DbType="VarChar(20)")]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(100)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoDocumento_Persona", Storage="_Personas", ThisKey="Id", OtherKey="IdTipoDocumento")]
		public EntitySet<Persona> Personas
		{
			get
			{
				return this._Personas;
			}
			set
			{
				this._Personas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Personas(Persona entity)
		{
			this.SendPropertyChanging();
			entity.TipoDocumento = this;
		}
		
		private void detach_Personas(Persona entity)
		{
			this.SendPropertyChanging();
			entity.TipoDocumento = null;
		}
	}
}
#pragma warning restore 1591
